#!/usr/bin/python

import imp
import _mysql
import sys
import argparse
import subprocess
import os


APP_PATH = os.path.abspath(os.path.dirname(__file__))


try:
	imp.find_module('cherrypy')
	cherryFound = True
except ImportError:
	cherryFound = False


parser = argparse.ArgumentParser()

parser.add_argument('-lS', '--services', help='Display a list of services', action='store_true')
parser.add_argument('-lSc', '--scans', help='Display all the scans', action='store_true')
parser.add_argument('-lH', '--hosts', help='Display a list of hosts', action='store_true')
parser.add_argument('-lC', '--credentials', help='Display list of credentials', action='store_true')
parser.add_argument('-nT', '--notitle', help='Surpresses column titles to make output suitable for scripts', action='store_true')
parser.add_argument('-rQ', '--rawquery', help='Run a raw query against the database', action='store_true')
parser.add_argument('-aC', '--addcredential', help='Add a credential', action='store_true')
parser.add_argument('-oT', '--outtable', help='Output as pretty table', action='store_true')
parser.add_argument('-cV', '--createvector', help='Create a new attack vector record', action='store_true')
parser.add_argument('-lV', '--listvectors', help='List all vectors', action='store_true')
parser.add_argument('-sN', '--scannmap', help='Run an nmap scan', action='store_true')
parser.add_argument('-sS', '--selectscan', help='Return objects from a specific scan', type=int)
parser.add_argument('-d', '--debug', help="Enable debug messages", action="store_true")
parser.add_argument('-wI', '--webinterface', help="Start Web Interface", action="store_true")
parser.add_argument('-wP', '--webport', help="Define an optional port for the web interface (Default 9191)", type=int)
parser.add_argument('filter', type=str, nargs='?', help='Filters returned results')
parser.add_argument('serviceid', type=str, nargs='?', help='ID of the service this vector exploits')
args = parser.parse_args()


dbhost = "localhost"
dbname = ""
dbuser = ""
dbpass = ""

f = open('secint.conf', 'r')
for line in f:
	line = line.strip('\n')
	if (args.debug):
		print line + "\r\n"
	linearr = line.split('=')
	if (linearr[0] == "database"):
		dbname = linearr[1]
		if (args.debug):
			print "Database name found, putting: " + linearr[1] + " into dbname variable"	
	elif (linearr[0] == "user"):
		dbuser = linearr[1]
		if (args.debug):	
			print "Database user found, putting: " + linearr[1] + " into dbuser variable"
	elif (linearr[0] == "password"):
		dbpass = linearr[1]
		if (args.debug):		
			print "Database pass found, putting: " + linearr[1] + " into dbpass variable"
	elif (linearr[0] == "host"):
                dbpass = linearr[1]
                if (args.debug):
                        print "Database host found, putting: " + linearr[1] + " into dbhost variable"



def get_latest_scan_id():
	con = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        con.query("SELECT * FROM SecintScans ORDER BY ScanTime DESC LIMIT 1")
        nmapscans = con.use_result()
        scanid = nmapscans.fetch_row()[0][0]
	if ( args.selectscan > 0 ):
		scanid = str(args.selectscan)
	return scanid
	


def get_hosts( filter ):
        scanid = get_latest_scan_id()
        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	
	if (filter):
		filtertext = filter
        else:
		filtertext = ''
		
	if (args.debug):
		print "Filtertext: " + filtertext
	
	derp.query("SELECT * FROM NmapHosts WHERE ParentScan=" + scanid)
	hostrow = derp.use_result()
	if (args.outtable):
		template = "{0:15}|{1:10}|{2:25}|{3:10}"	
	
	if (not args.notitle):
		if (args.outtable):
			print template.format("HostIP", "HostStatus", "HostName", "HostOS")
		else:
			print "HostIP\t\t\tHostStatus\t\t\tHostName\t\t\tHostOS"
	
	while True:
		row = hostrow.fetch_row()
		if not row:
			break
		greptext = row[0][1] + "\t\t" + row[0][3] + "\t\t\t" + row[0][4] + "\t\t\t\t\t" + row[0][5]
		if filtertext in greptext:
			if (args.outtable):
				print template.format(row[0][1], row[0][3], row[0][4], row[0][5])
			else:
				print row[0][1] + "\t\t" + row[0][3] + "\t\t\t" + row[0][4] + "\t\t\t\t\t" + row[0][5]


def get_services( filter ):
	scanid = get_latest_scan_id()
        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	template = "{0:15}|{1:25}|{2:8}|{3:8}|{4:8}|{5:15}|{6:45}|{7:35}"
	hostcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	hostcon.query("SELECT * FROM NmapHosts WHERE ParentScan=" + scanid)
	hostquery = hostcon.use_result()
	
	returnString = ''

	if (not args.notitle):
		if (args.outtable):
			returnString = returnString + template.format("HostIP", "HostName", "SvcID", "SvcProto", "SvcPort", "ServiceName", "ServiceProduct", "ServiceVersion")
		else:
			returnString = returnString + 'HostIP\t\t\tHostName\tSvcID\tSvcProto\tSvcPort\tServiceName\tServiceProduct\tServiceVersion'

		returnString = returnString + "\r\n"
	
	if (filter):
		filterarg = filter
	else:
		filterarg = ''

	while True:
		hostrow = hostquery.fetch_row()
		if (not hostrow):
			break
		hostid = hostrow[0][0]
		filtertext = 'WHERE ParentHost=' + hostid
		derp.query("SELECT * FROM NmapServices " + filtertext)
		servicequery = derp.use_result()

		while True:
			servicerow = servicequery.fetch_row()
			if (not servicerow):
				break
			greptext = hostrow[0][1] + '\t\t' + hostrow[0][4] + '\t\t' + servicerow[0][0] + '\t\t' + servicerow[0][1] + '\t\t' + servicerow[0][2] + '\t\t' + servicerow[0][3] + '\t\t' + servicerow[0][6] + '\t\t' + servicerow[0][7]
			if (args.debug):
				print "Check if: " + greptext + " contains: " + filterarg

			if filterarg in greptext:
				if (args.outtable):
					returnString = returnString + template.format(hostrow[0][1], hostrow[0][4], servicerow[0][0], servicerow[0][1], servicerow[0][2], servicerow[0][3], servicerow[0][6], servicerow[0][7])
				else:
					returnString = returnString +  hostrow[0][1] + '\t\t' + hostrow[0][4] + '\t\t' + servicerow[0][0] + '\t\t' + servicerow[0][1] + '\t\t' + servicerow[0][2] + '\t\t' + servicerow[0][3] + '\t\t' + servicerow[0][6] + '\t\t' + servicerow[0][7]
				
				returnString = returnString + "\r\n"

	return returnString
		
def raw_query( query ):
	querycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        querycon.query( query )
        query = querycon.use_result()
        while True:
        	queryrow = query.fetch_row()
                if (not queryrow):
                	break
		print queryrow


def create_vector( serviceid ):
	querycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	filter = filter.split("|")
	cquery = "INSERT INTO Vectors (VectorServiceID, VectorReference) VALUES (" + filter[0] + ", \"" + filter[1] + "\")"
        querycon.query( cquery )


def list_vectors( filter ):
	
	if (filter):
		filterarg = filter
	else:
		filterarg = ''

	template = "{0:10}|{1:20}|{2:15}|{3:30}|{4:15}|{5:45}"
	vquerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
       	vquery = "SELECT * FROM Vectors"
	vquerycon.query( vquery )
        vquery = vquerycon.use_result()

	if (not args.notitle):
        	if (args.outtable):
                	print template.format("VectorID", "HostIP", "ServicePort", "ServiceProduct", "ServiceVersion", "VectorReference")
		else:
			print 'VectorID\tHostIP\tServicePort\tServiceProduct\tServiceVersion\tVectorReference'

        while True:
                vqueryrow = vquery.fetch_row()
                if (not vqueryrow):
                        break
                squerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
		squery = "SELECT * FROM NmapServices WHERE ServiceID=" + vqueryrow[0][1]
		squerycon.query( squery )
		squery = squerycon.use_result()
		while True:
			squeryrow = squery.fetch_row()
			if (not squeryrow):
				break
			hquerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
			hquery = "SELECT * FROM NmapHosts WHERE HostID=" + squeryrow[0][4]
			hquerycon.query( hquery )
			hquery = hquerycon.use_result()
			while True:
				hqueryrow = hquery.fetch_row()
				if (not hqueryrow):
					break
				greptext = vqueryrow[0][0] + '\t\t' + hqueryrow[0][1] + '\t\t' + squeryrow[0][2] + '\t\t' + squeryrow[0][6] + '\t\t' + squeryrow[0][7] + '\t\t' + vqueryrow[0][2]

				if filterarg in greptext:
					if (args.outtable):
						print template.format(vqueryrow[0][0], hqueryrow[0][1], squeryrow[0][2], squeryrow[0][6], squeryrow[0][7], vqueryrow[0][2])
					else:
						print vqueryrow[0][0] + '\t\t' + hqueryrow[0][1] + '\t\t' + squeryrow[0][2] + '\t\t' + squeryrow[0][6] + '\t\t' + squeryrow[0][7] + '\t\t' + vqueryrow[0][2]


def get_scans( filter ):

	if (filter):
		filterarg = filter
	else:
		filterarg = ''

        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        derp.query("SELECT * FROM SecintScans")
        hostrow = derp.use_result()
        if (args.outtable):
                template = "{0:15}|{1:10}|{2:20}|{3:25}|{4:100}"

        if (not args.notitle):
                if (args.outtable):
                        print template.format("ScanID", "ScanType", "ScanDuration", "ScanTime", "ScanOptions")
                else:
                        print "ScanID\t\t\tScanType\t\t\tScanDuration\t\t\tScanTime\t\t\tScanOptions"

        while True:
                row = hostrow.fetch_row()
                if not row:
                        break
		greptext = row[0][0] + "\t\t" + row[0][4] + "\t\t" + row[0][2] + "\t\t\t" + row[0][1] + "\t\t\t\t\t" + row[0][3]
		
		if filterarg in greptext:
                	if (args.outtable):
                        	print template.format(row[0][0], row[0][4], row[0][2], row[0][1], row[0][3])
                	else:
                        	print row[0][0] + "\t\t" + row[0][4] + "\t\t" + row[0][2] + "\t\t\t" + row[0][1] + "\t\t\t\t\t" + row[0][3]
	

def list_credentials( filter ):
	print "Not Implemented"


def scan_nmap( options ):
	print "Performing nmap scan with options: " + options
	pipe = subprocess.Popen(["./nmapdb.pl", options], stdout=subprocess.PIPE)
	result = pipe.stdout.read()
	print result
	print "nmap scan complete. The results have been inserted into the secint db"


class host():
	def __init__(self):
		self.hostipaddr = None
		self.hoststatus = None
		self.hostname = None
		self.hostos = None
	def outputall( self ):
		return self.hostipaddr + self.hoststatus + self.hostname + self.hostos



def temp_get_hosts():

        scanid = get_latest_scan_id()
        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	derp.query("SELECT * FROM NmapHosts WHERE ParentScan=" + scanid)
	hostrow = derp.use_result()
	hostList = list()
	while True:
		row = hostrow.fetch_row()
		if not row:
			break
		tmpHost = host()
		tmpHost.hostipaddr = row[0][1]
		tmpHost.hoststatus = row[0][3]
		tmpHost.hostname = row[0][4]
		tmpHost.hostos = row[0][5]		
		hostList.append(tmpHost)
	return hostList




class SecIntWeb:

	def index(self, **args):
		
		pageText = ("<html><head>"
			"<script type=\"text/javascript\" src=\"./jsgl.js\"></script>"
			"</head"
			"<body>"
			"<div id=\"panel\" style=\"width: 1024px; height: 480px\"></div>"
			"<script type=\"text/javascript\">"
			"myPanel = new jsgl.Panel(document.getElementById(\"panel\"));")
		
		
		tmpHostList = temp_get_hosts()
		hostList = list()
		for host in tmpHostList:
			if host.hoststatus == "up":
				hostList.append(host)

		hostNum = len(hostList)
		hostWidth = 1024/hostNum
		
		hostCounter = 0
		for host in hostList:
			pageText = pageText + "host" + str(hostCounter) + " = myPanel.createRectangle();"
			pageText = pageText + "host" + str(hostCounter) + ".setWidth(" + str(hostWidth - 5) + ");"
			pageText = pageText + "host" + str(hostCounter) + ".setHeight(25);"
			pageText = pageText + "host" + str(hostCounter) + ".setX(" + str(hostWidth * hostCounter) + ");"
			pageText = pageText + "host" + str(hostCounter) + ".setY(0);" 
			pageText = pageText + "myPanel.addElement(host" + str(hostCounter) + ");"
			#pageText = pageText + host.outputall() 
			hostCounter = hostCounter + 1
		pageText = pageText + "</script>"		

		if not args:
				
			pageText = pageText + "Latest Service Data <br>:"
			
			pageText = pageText + get_services('')

		else:
			if 'd' in args:
				pageText = pageText + "YES"

		pageText = pageText + '</body></html>'	
		return pageText
	
	index.exposed = True

	def jsgl_js( self ):
		fileHandle = open('jsgl.js')
		fileContents = fileHandle.read()
		return fileContents
	jsgl_js.exposed = True


def start_web_interface( filter ):

	if (cherryFound):

		print "CherryPy Found, starting web server"	

		import cherrypy

		if args.webport > 0:
			portnum = args.webport
		else:
			portnum = 9191

		if (args.debug):
			print portnum

		cherrypy.server.socket_port = portnum
		cherrypy.server.socket_host = '0.0.0.0'
		
		#cherrypy.config.update({ "environment": "embedded" })

		cherrypy.quickstart(SecIntWeb())

	else:
		print "CherryPy Not Found :( "
		


if (args.services):

	print get_services( args.filter )

elif (args.hosts):

	get_hosts( args.filter )	

elif (args.scans):

	get_scans( args.filter )

elif (args.rawquery):

	raw_query( args.filter )

elif (args.createvector):
	
	create_vector( args.serviceid )

elif (args.listvectors):
	
	list_vectors( args.filter )

elif (args.scannmap):
	
	scan_nmap( args.filter )

elif (args.credentials):

	list_credentials( args.filter)

elif (args.webinterface):

	start_web_interface( filter )

else:
	
	print 'not implemened: ' + APP_PATH
