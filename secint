#!/usr/bin/python

import imp
import _mysql
import sys
import argparse
import subprocess
import os


APP_PATH = os.path.abspath(os.path.dirname(__file__))


try:
	imp.find_module('cherrypy')
	cherryFound = True
except ImportError:
	cherryFound = False


class ansicolors:
	GREEN = '\033[92m'
	BLUE = '\033[94m'
	YELLOW = '\033[93m'
	RED = '\033[91m'
	PINK = '\033[95m'
	ENDC = '\033[0m'






parser = argparse.ArgumentParser(description="Security Intellegence Framework")
mutgroup = parser.add_mutually_exclusive_group(required=True)
#Primary Optional Arguments
mutgroup.add_argument('-lSs', '--scanservices', help='List scanned services', action='store_true')
mutgroup.add_argument('-lSc', '--scans', help='List scans', action='store_true')
mutgroup.add_argument('-lSh', '--scanhosts', help='List scanned hosts', action='store_true')
mutgroup.add_argument('-lC', '--credentials', help='List credentials and hashes', action='store_true')
mutgroup.add_argument('-lV', '--listVulns', help='List vulnerabilities', action='store_true')
mutgroup.add_argument('-lVe', '--vectors', help='List vectors', action='store_true')
mutgroup.add_argument('-wI', '--webinterface', help="Start web interface", action="store_true")
mutgroup.add_argument('-rQ', '--rawquery', help='Run a raw query (CAUTION)', action='store_true')
mutgroup.add_argument('-aC', '--addcredential', help='Add credentials', action='store_true')
mutgroup.add_argument('-cV', '--createvector', help='Add vector', action='store_true')
mutgroup.add_argument('-cVu', '--createvuln', help='Add vulnerability', action='store_true')
mutgroup.add_argument('-sN', '--scannmap', metavar='NMAPOPTIONS', help='Run nmap scan')
mutgroup.add_argument('-dS', '--deletescan', metavar="SCANID", help='Delete a scan', type=int)
mutgroup.add_argument('-aN', '--addnetwork', help="Add a secint network object", action='store_true')
mutgroup.add_argument('-aH', '--addhost', help="Add a secint host object", action='store_true')
mutgroup.add_argument('-lS', '--listservices', help="List services", action='store_true')
mutgroup.add_argument('-lH', '--listhosts', help="List Hosts", action='store_true')
mutgroup.add_argument('-aVR', '--addvectorreference', help="Add a reference for a vector", action='store_true')
mutgroup.add_argument('-avR', '--addvulnreference', help="Add a reference for a vuln", action='store_true')
mutgroup.add_argument('-pH', '--promotehost', help="Promote a scanned host to a secint host", type=int)
mutgroup.add_argument('-uH', '--updatehost', help="Update a secint host", type=int)
mutgroup.add_argument('-lN', '--listnetworks', help="List networks")


#Modifiers
parser.add_argument('-nT', '--notitle', help='Surpresses column titles to make output suitable for scripts', action='store_true')
parser.add_argument('-oT', '--outtable', help='Output as pretty table', action='store_true')
parser.add_argument('-sS', '--selectscan', help='Return objects from a specific scan', type=int)
parser.add_argument('-d', '--debug', help="Enable debug messages", action="store_true")
parser.add_argument('-wP', '--webport', help="Define an optional port for the web interface (Default 9191)", type=int)
parser.add_argument('-s', '--serviceid', help="Define the ID of a service for a vuln or vector", type=int)
parser.add_argument('-r', '--reference', help="Define a reference for a vuln or vector (ie a public exploit)")
parser.add_argument('-de', '--description', help="Define a description for the object being added")
parser.add_argument('-ri', '--risk', help="Define a risk for a vuln", type=int)
parser.add_argument('-hi', '--hostid', help="Define the ID of a host", type=int)
parser.add_argument('-c', '--cidr', help="Define a Network CIDR (ip/prefix)")
parser.add_argument('-n', '--name', help="Define a name for the object being added")
parser.add_argument('-ip', '--ipaddress', help="Define an IP for the object being added")
parser.add_argument('-ni', '--networkid', help="Define a Network ID for the object being added")
parser.add_argument('-S', '--status', help="Define a status for an object")
parser.add_argument('-R', '--root', help="Define a root for an object")
parser.add_argument('-P', '--pwned', help="Define a pwnned for an object")
parser.add_argument('-O', '--OS', help="Define an OS for an object")
parser.add_argument('-vI', '--vid', help="Vuln or Vector ID")
parser.add_argument('-Re', '--remediation', help="Vuln Remediation")



#Positionals
parser.add_argument('filter', type=str, nargs='?', help='Filters output lists')

args = parser.parse_args()


dbhost = "localhost"
dbname = ""
dbuser = ""
dbpass = ""

f = open('secint.conf', 'r')
for line in f:
	line = line.strip('\n')
	if (args.debug):
		print line + "\r\n"
	linearr = line.split('=')
	if (linearr[0] == "database"):
		dbname = linearr[1]
		if (args.debug):
			print "Database name found, putting: " + linearr[1] + " into dbname variable"	
	elif (linearr[0] == "user"):
		dbuser = linearr[1]
		if (args.debug):	
			print "Database user found, putting: " + linearr[1] + " into dbuser variable"
	elif (linearr[0] == "password"):
		dbpass = linearr[1]
		if (args.debug):		
			print "Database pass found, putting: " + linearr[1] + " into dbpass variable"
	elif (linearr[0] == "host"):
                dbpass = linearr[1]
                if (args.debug):
                        print "Database host found, putting: " + linearr[1] + " into dbhost variable"



def start_web_interface( filter ):

        if (cherryFound):

                print "CherryPy Found, starting web server"

                import cherrypy

                if args.webport > 0:
                        portnum = args.webport
                else:
                        portnum = 9191

                if (args.debug):
                        print portnum

                cherrypy.server.socket_port = portnum
                cherrypy.server.socket_host = '0.0.0.0'
                #cherrypy.config.update({ "environment": "embedded" })
                cherrypy.quickstart(SecIntWeb())

        else:
                print "CherryPy Not Found :( "



class SecIntWeb:

	def index(self, **args):
		
		pageText = ("<html><head>"		
			"<script type=\"text/javascript\" src=\"./jsgl.js\"></script>"
			"</head>"
			"<body>"
			"<div id=\"panel\" style=\"width: 1024px; height: 50px\"></div>"
			"<script type=\"text/javascript\">"
			"myPanel = new jsgl.Panel(document.getElementById(\"panel\"));")
		
		
		tmpHostList = get_scan_hosts()
		hostList = list()
		for host in tmpHostList:
			if host.hoststatus == "up":
				hostList.append(host)

		hostNum = len(hostList)
		hostWidth = 1024/hostNum
		
		hostCounter = 0
		for host in hostList:

			if host.hostname == "0":
				host.hostname = "unknown"
			
			tmpServiceList = get_scan_services(host.hostipaddr)
				
			pageText = pageText + ("var host" + str(hostCounter) + " = myPanel.createRectangle();"
					"host" + str(hostCounter) + ".setWidth(" + str(hostWidth - 5) + ");"
					"host" + str(hostCounter) + ".setHeight(25);"
					"host" + str(hostCounter) + ".setX(" + str(hostWidth * hostCounter) + ");"
					"host" + str(hostCounter) + ".setY(0);"
					"host" + str(hostCounter) + ".getFill().setColor('rgb(255,0,0)');"
					"myPanel.addElement(host" + str(hostCounter) + ");"
					"var derp" + str(hostCounter) + " = function() {"
					"document.getElementById('hostservice').innerHTML = '"
					"HostIP: " + host.hostipaddr + "<br>"
					"HostName: " + host.hostname + "<br>"
					"HostOS: " + host.hostos + "<br><br>"
					"Services Detected: <br><br>"
					"<table border=\"1\">"
					"<tr>"
					"<td>ServicePort</td>"
					"<td>ServiceProto</td>"
					"<td>ServiceID</td>"
					"<td>ServiceName</td>"
					"<td>SerivceProduct</td>"
					"<td>ServiceVersion</td>"
					"</tr>")

			for svc in tmpServiceList:
				pageText = pageText + ("<tr><td>" + svc.serviceport + "</td>"
						"<td>" + svc.serviceproto + "</td>"
						"<td>" + svc.serviceid + "</td>"
						"<td>" + svc.servicename + "</td>"
						"<td>" + svc.serviceproduct + "</td>"
						"<td>" + svc.serviceversion + "</td>"
						"</tr>")
			
			pageText = pageText + "</table>"		
			pageText = pageText + ("';"
					"};"
					"var lerp" + str(hostCounter) + " = function() {"
					"document.getElementById('hostservice').innerHTML = ' ';"
					"};"
					"host" + str(hostCounter) + ".addMouseOverListener(derp" + str(hostCounter) + ");"
					"host" + str(hostCounter) + ".addMouseOutListener(lerp" + str(hostCounter) + ");")								
			hostCounter = hostCounter + 1

		pageText = pageText + "</script>"		
		
		pageText = pageText + "<div id=\"hostservice\"></div>"
		
		if not args:
			print "LERP"
		else:
			if 'd' in args:
				pageText = pageText + "d Arg"

		pageText = pageText + '</body></html>'	
		return pageText
	
	index.exposed = True

	def jsgl_js( self ):
		fileHandle = open('jsgl.js')
		fileContents = fileHandle.read()
		return fileContents
	jsgl_js.exposed = True




def get_latest_scan_id():
	con = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        con.query("SELECT * FROM SecintScans ORDER BY ScanTime DESC LIMIT 1")
        nmapscans = con.use_result()
        scanid = nmapscans.fetch_row()[0][0]
	if ( args.selectscan > 0 ):
		scanid = str(args.selectscan)
	return scanid
			
def raw_query( query ):
	querycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        querycon.query( query )
        query = querycon.use_result()
        while True:
        	queryrow = query.fetch_row()
                if (not queryrow):
                	break
		print queryrow

def get_scans( filter ):

	if (filter):
		filterarg = filter
	else:
		filterarg = ''

        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        derp.query("SELECT * FROM SecintScans")
        hostrow = derp.use_result()
        if (args.outtable):
                template = "{0:15}|{1:10}|{2:20}|{3:25}|{4:100}"

        if (not args.notitle):
                if (args.outtable):
                        print template.format("ScanID", "ScanType", "ScanDuration", "ScanTime", "ScanOptions")
                else:
                        print "ScanID\t\t\tScanType\t\t\tScanDuration\t\t\tScanTime\t\t\tScanOptions"

        while True:
                row = hostrow.fetch_row()
                if not row:
                        break
		greptext = row[0][0] + "\t\t" + row[0][4] + "\t\t" + row[0][2] + "\t\t\t" + row[0][1] + "\t\t\t\t\t" + row[0][3]
		
		if filterarg in greptext:
                	if (args.outtable):
                        	print template.format(row[0][0], row[0][4], row[0][2], row[0][1], row[0][3])
                	else:
                        	print row[0][0] + "\t\t" + row[0][4] + "\t\t" + row[0][2] + "\t\t\t" + row[0][1] + "\t\t\t\t\t" + row[0][3]
	
def list_credentials( filter ):
	print "Not Implemented"

def scan_nmap( options ):
	print "Performing nmap scan with options: " + options
	pipe = subprocess.Popen(["./nmapdb.pl", options], stdout=subprocess.PIPE)
	result = pipe.stdout.read()
	print result
	print "nmap scan complete. The results have been inserted into the secint db"

class host():
	def __init__(self):
		self.hostid = None
		self.hostipaddr = None
		self.hoststatus = None
		self.hostname = None
		self.hostos = None
	def outputall( self ):
		return self.hostipaddr + self.hoststatus + self.hostname + self.hostos + self.hostid

class service(host):
	def __init__(self):
		host.__init__(self)
		self.serviceid = None
		self.serviceproto = None
		self.serviceport = None
		self.servicename = None
		self.serviceproduct = None
		self.serviceversion = None
	def outputall( self ):
		return self.hostipaddr + self.hoststatus + self.hostname + self.hostos + self.serviceid + self.serviceproto + self.serviceport + self.servicename + self.servicename + self.serviceproduct + self.serviceversion

class vector(service):
	def __init__(self):
		service.__init__(self)
		self.vectorid = None
		self.vectorref = None
	def outputall( self ):
		return self.hostipaddr + self.hoststatus + self.hostname + self.hostos + self.serviceid + self.serviceproto + self.serviceport + self.servicename + self.servicename + self.serviceproduct + self.serviceversion + self.vectorif + self.vectorref

def get_scan_hosts():

        scanid = get_latest_scan_id()
        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	derp.query("SELECT * FROM NmapHosts WHERE ParentScan=" + scanid)
	hostrow = derp.use_result()
	hostList = list()
	while True:
		row = hostrow.fetch_row()
		if not row:
			break
		tmpHost = host()
		tmpHost.hostid = row[0][0]
		tmpHost.hostipaddr = row[0][1]
		tmpHost.hoststatus = row[0][3]
		tmpHost.hostname = row[0][4]
		tmpHost.hostos = row[0][5]		
		hostList.append(tmpHost)
	return hostList


def get_hosts():

        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        derp.query("SELECT * FROM SecintHosts")
        hostrow = derp.use_result()
        hostList = list()
        while True:
                row = hostrow.fetch_row()
                if not row:
                        break
                tmpHost = host()
		tmpHost.hostid = row[0][0]
		tmpHost.hostname = row[0][1]
                tmpHost.hostipaddr = row[0][4]
		tmpHost.hostos = row[0][5]
                tmpHost.hoststatus = row[0][8]
                tmpHost.hostpwned = row[0][6]
                tmpHost.hostroot = row[0][7]
                hostList.append(tmpHost)
        return hostList



def get_vulns():
	vuln = mysql.connect(dbhost, dbuser, dbpass, dbname)
	
def get_scan_services( hostIP ):
	scanid = get_latest_scan_id()
	derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	hostcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	
	if (hostIP != None):
		tmpQuery = "SELECT * FROM NmapHosts WHERE ParentScan=" + scanid + " AND HostIP=\"" + hostIP + "\""
	else:
		tmpQuery = "SELECT * FROM NmapHosts WHERE ParentScan=" + scanid
	
	hostcon.query(tmpQuery)
	hostquery = hostcon.use_result()
	serviceList = list()
	while True:
		hostrow = hostquery.fetch_row()
		if (not hostrow):
			break
		hostid = hostrow[0][0]
		filtertext = 'WHERE ParentHost=' + hostid
		derp.query("SELECT * FROM NmapServices " + filtertext)
		servicequery = derp.use_result()
		while True:
			servicerow = servicequery.fetch_row()
			if (not servicerow):
				break
			tmpService = service()
			tmpService.hostipaddr = hostrow[0][1]
			tmpService.hoststatus = hostrow[0][3]
			tmpService.hostname = hostrow[0][4]
			tmpService.hostos = hostrow[0][5]
			tmpService.serviceid = servicerow[0][0]
			tmpService.serviceproto = servicerow[0][1]
			tmpService.serviceport = servicerow[0][2]
			tmpService.servicename = servicerow[0][3]
			tmpService.serviceproduct = servicerow[0][6]
			tmpService.serviceversion = servicerow[0][7]
			serviceList.append(tmpService)	
	return serviceList	


def display_scan_hosts( filter ):
	if (filter):
		filtertext = filter
        else:
		filtertext = ''
		
	if (args.debug):
		print "Filtertext: " + filtertext
	
	if (args.outtable):
		template = "{0:15}|{1:10}|{2:25}|{3:10}"	
	
	if (not args.notitle):
		if (args.outtable):
			print template.format("HostID", "HostIP", "HostStatus", "HostName", "HostOS")
		else:
			print "HostID\t\tHostIP\t\t\tHostStatus\t\t\tHostName\t\t\tHostOS"
	
	hostList = get_scan_hosts()
	
	for host in hostList:
		greptext = host.hostid + "\t" + host.hostipaddr + "\t\t" + host.hoststatus + "\t\t\t" + host.hostname + "\t\t\t\t\t" + host.hostos
		if filtertext in greptext:
			if (args.outtable):
				print template.format(host.hostid, host.hostipaddr, host.hoststatus, host.hostname, host.hostos)
			else:
				print host.hostid + "\t" + host.hostipaddr + "\t\t" + host.hoststatus + "\t\t\t" + host.hostname + "\t\t\t\t\t" + host.hostos

def display_scan_services( filter ):	
	template = "{0:15}|{1:25}|{2:8}|{3:8}|{4:8}|{5:15}|{6:45}|{7:35}"
	if (not args.notitle):
		if (args.outtable):
			print template.format("HostIP", "HostName", "SvcID", "SvcProto", "SvcPort", "ServiceName", "ServiceProduct", "ServiceVersion")
		else:
			print 'HostIP\t\t\tHostName\tSvcID\tSvcProto\tSvcPort\tServiceName\tServiceProduct\tServiceVersion'

	if (filter):
		filterarg = filter
	else:
		filterarg = ''

	serviceList = get_scan_services(None)
	
	for service in serviceList:
		greptext = service.hostipaddr + '\t\t' + service.hostname + '\t\t' + service.serviceid + '\t\t' + service.serviceproto + '\t\t' + service.serviceport + '\t\t' + service.servicename + '\t\t' + service.serviceproduct + '\t\t' + service.serviceversion
		if filterarg in greptext:
			if (args.outtable):
				print template.format(service.hostipaddr, service.hostname, service.serviceid, service.serviceproto, service.serviceport, service.servicename, service.serviceproduct, service.serviceversion)
			else:
				print service.hostipaddr + '\t\t' + service.hostname + '\t\t' + service.serviceid + '\t\t' + service.serviceproto + '\t\t' + service.serviceport + '\t\t' + service.servicename + '\t\t' + service.serviceproduct + '\t\t' + service.serviceversion



def multi_line_input(helloString, stringDelim):
	print helloString
	stringBuf = ""
	if stringDelim != None:
		for line in iter(raw_input, stringDelim):
			stringBuf = stringBuf + line
			pass
	return stringBuf


def add_host():
	if (args.name != None):
		hstname = args.name
	else:
		hstname = raw_input('Enter a hostname: ')
	if (args.ipaddress != None):
		hstip = args.ipaddress
	else:
		hstip = raw_input('Enter an IP Address: ')
	if (args.networkid != None):
		hstnid = args.networkid
	else: 
		hstnid = raw_input('Enter a network ID: ')
	if ( args.description != None):
		hstdesc = args.description
	else:
		hstdesc = multi_line_input('Enter breif description. End with !: ', '!')
	if (args.status != None):
		hststatus = args.status
	else:
		hststatus = raw_input('Enter a status: ')
	if (args.root != None):
		hstroot = args.root
	else:
		hstroot = raw_input('Enter a root: ')
	if ( args.pwned != None ):
		hstpwned = args.pwned
	else:
		hstpwned = raw_input('Enter a pwnd: ')
	if (args.OS != None):
		hstos = args.OS
	else:
		hstos = raw_input('Enter an os: ')

	print "Adding host with the following values: "
	print "Host Name: " + hstname
	print "Host IP: " + hstip
	print "Host Network ID: " + hstnid
	print "Host Description: " + hstdesc

	addhostcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	addhostquery = ("INSERT INTO SecintHosts ("
					"HostName, HostIP, HostNetwork, HostDescription, HostOS, HostStatus, HostPwned, HostRoot)"
					"VALUES (\"" + hstname + "\", \"" + hstip + "\", \"" + hstnid + "\", \"" + hstdesc + "\", \"" + hstos + "\", \"" + hststatus + "\""
					", \"" + hstpwned + "\", \"" + hstroot + "\")")
	addhostcon.query(addhostquery)
		


def parse_cidr(networkcidr):
	cidrarray = networkcidr.split("/")
	return cidrarray[0], cidrarray[1]

def add_network():
	if (args.name != None):
		networkname = args.name
	else:
		networkname = raw_input('Enter a name for this network: ')
	if (args.cidr != None):
		networkip, networkprefix = parse_cidr(args.cidr)
	else:
		tmpcidr = raw_input('Enter the CIDR for this network in the ipaddress/prefix format: ')
		networkip, networkprefix = parse_cidr(tmpcidr)
	if ( args.description != None):
		networkdesc = args.description
	else:
		networkdesc = multi_line_input('Enter breif description. End with !: ', '!')
	
	print "Adding network with the following values: "
	print "Network Name: " + networkname
	print "Network IP: " + networkip
	print "Network Prefix: " + networkprefix
	print "Network Description: " + networkdesc

	addnetcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	addnetquery = "INSERT INTO SecintNetworks (NetworkName, NetworkIP, NetworkPrefix, NetworkDescription) VALUES (\"" + networkname + "\", \"" + networkip + "\", \"" + networkprefix + "\",\"" + networkdesc + "\")"
	addnetcon.query(addnetquery)	


def delete_scan( scanid ):
	delcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	delquery = "DELETE FROM NmapServices WHERE ParentHost IN ( SELECT HostID FROM NmapHosts WHERE ParentScan=" + str(scanid) + ")"
	delcon.query( delquery )
	delquery = "DELETE FROM NmapHosts WHERE ParentScan=" + str(scanid)
	delcon.query( delquery )
	delquery = "DELETE FROM SecintScans WHERE ScanID=" + str(scanid)
	delcon.query( delquery )




def display_hosts():
	if (args.filter):
		filtertext = args.filter
	else:
                filtertext = ''

        if (args.debug):
                print "Filtertext: " + filtertext

        if (args.outtable):
                template = "{0:3}|{1:23}|{2:15}|{3:3}|{4:3}|{5:3}|{6:15}"

        if (not args.notitle):
                if (args.outtable):
                        print template.format("ID", "Name", "IP",  "STS", "PWN", "ROT", "OS")
                else:
                        print "HostID\tHost\tNameHostIP\tHostStatus\tHostPwned\tHostRoot\tHostOS"

        hostList = get_hosts()

        for host in hostList:
                greptext = host.hostid + "\t\t" + host.hostname + "\t" + host.hostipaddr + "\t" + host.hoststatus + "\t\t" + host.hostpwned + "\t\t" + host.hostroot + "\t\t" + host.hostos
                if filtertext in greptext:
			if (host.hoststatus == "1"):
				host.hoststatus = ansicolors.GREEN +  "[+]" + ansicolors.ENDC
			else:
				host.hoststatus = ansicolors.RED + "[-]" + ansicolors.ENDC
			if (host.hostroot == "1"):
				host.hostroot = ansicolors.GREEN +  "[+]" + ansicolors.ENDC
			else:
				host.hostroot = ansicolors.RED + "[-]" + ansicolors.ENDC
			if (host.hostpwned == "1"):
				host.hostpwned = ansicolors.GREEN +  "[+]" + ansicolors.ENDC
			else:
				host.hostpwned = ansicolors.RED + "[-]" + ansicolors.ENDC

                        if (args.outtable):
                                print template.format(host.hostid, host.hostname, host.hostipaddr, host.hoststatus, host.hostpwned, host.hostroot, host.hostos)
                        else:
				print host.hostid + "\t" + host.hostname + "\t" + host.hostipaddr + "\t" + host.hoststatus + "\t\t" + host.hostpwned + "\t\t" + host.hostroot + host.hostos + "\t"




def add_vector():
	if ( args.hostid != None):
		hostid = args.hostid
	else:
		hostid = raw_input('Enter the ID of the host: ')
	
	if ( args.name != None ):
		vname = args.name
	else:
		vname = raw_input('Enter a name for the vector: ')
	
	vecon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	vecquery = "INSERT INTO SecintVectors ( VectorHostID ) VALUES ( " + hostid + " )"
	vecon.query(vecquery)
	
	
	
def add_vuln():
	
	if (args.hostid != None):
		vulnhostid = args.hostid
	else:
		vulnhostid = raw_input('Enter a host id for this vuln: ')		

	if ( args.name != None):
		vulnname = args.name
	else:
		vulnname = raw_input('Enter a name for this vuln: ')

	if (args.description != None):
		vulnDesc = args.description
	else:
		vulnDesc = multi_line_input('Enter breif description. End with !: ', '!')
		
	if (args.risk != None):
		vulnRisk = args.risk
	else:
		vulnRisk = raw_input('Enter a risk level for this vuln: ')
	
	if ( args.remediation != None ):
		vulnRem = args.remediation
	else:
		vulnRem = raw_input('Enter the remediation for this vuln: ')
	
	vulncon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	vulnquery = ("INSERT INTO SecintVulns (VulnRisk, VulnName, VulnHostID, VulnDescription, VulnRemediation)"
				" VALUES (\"" + vulnRisk + "\", \"" + vulnname + "\", \"" + vulnhostid + "\", \"" + vulnDesc + "\", \"" + vulnRem + "\")")
	vulncon.query(vulnquery)
	
	
def add_reference():
	if (args.vid != None):
		vid = args.vid
	else:
		if ( args.addvulnreference ):
			vid = raw_input('Enter the vuln id: ')
		else:
			vid = raw_input('Enter the vector id: ')
	
	if ( args.reference != None ):
		vref = args.reference
	else:
		vref = raw_input('Please enter the reference:' )
	
	refcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	
	if ( args.addvulnreference ):
		refquery = "INSERT INTO SecintVulnReferences ( ReferenceVulnID, ReferenceContent ) VALUES ( " + vid + ", \"" + vref + "\")"
	else:
		refquery = "INSERT INTO SecintVectorReferences ( ReferenceVectorID, ReferenceContent ) VALUES ( " + vid + ", \"" + vref + "\")"
	
	refcon.query(refquery)
	


def promote_host():
	promcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	dathost = "SELECT * FROM NmapHosts WHERE HostID=" + str(args.promotehost)
	promcon.query(dathost)
	hostrow = promcon.use_result()
	row = hostrow.fetch_row()
	tmpHost = host()
	tmpHost.hostid = row[0][0]
	tmpHost.hostipaddr = row[0][1]
	tmpHost.hoststatus = row[0][3]
	tmpHost.hostname = row[0][4]
	tmpHost.hostos = row[0][5]
	
	if (args.networkid != None):
		hostnid = args.networkid
	else:
		hostnid = raw_input('Enter the network id:' )
		
	if (args.pwned != None):
		hstpwned = args.pwned
	else:
		hstpwned = raw_input('Host pwned? (1/0): ')
	
	if (args.root != None):
		hstroot = args.root
	else:
		hstroot = raw_input('Host rooted? (1/0): ')
		
	if (tmpHost.hoststatus == "up"):
		tmpHost.hoststatus = "1"
	else:
		tmpHost.hoststatus = "0"
		
	
	addhostcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	addhostquery = ("INSERT INTO SecintHosts ("
					"HostName, HostIP, HostNetwork, HostDescription, HostOS, HostStatus, HostPwned, HostRoot)"
					"VALUES (\"" + tmpHost.hostname + "\", \"" + tmpHost.hostipaddr + "\", \"" + hostnid + "\", \"\", \"" + tmpHost.hostos + "\", \"" + tmpHost.hoststatus + "\""
					", \"" + hstpwned + "\", \"" + hstroot + "\")")
	addhostcon.query(addhostquery)
	


#Crap, I need to abstract the hosts from ips and stuff. Maybe have nics attached to both hosts and networks. 
def update_host():
	getcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	getquery = "SELECT * FROM SecintHosts WHERE HostID=" + str(args.updatehost)
	getcon.query(getquery)
	getrow = getcon.use_result()
	row = getrow.fetch_row()
	hostid = row[0][0]
	hostname = row[0][1]
	hostnetwork = row[0][2]
	hostdesc = row[0][3]
	hostip = row[0][4]
	hostos = row[0][5]
	hostpwned = row[0][6]
	hostroot = row[0][7]
	hoststatus = row[0][8]
	
	if (args.root != None):
		hostroot = args.root
		
	if (args.pwned != None):
		hostpwned = args.pwned
	
	updatecon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	updateq = "UPDATE SecintHosts SET HostRoot=" + str(hostroot) + ", HostPwned=" + str(hostpwned) + " WHERE HostID=" + hostid
	updatecon.query(updateq)
	
	



if (args.scanservices):

	display_scan_services( args.filter )	

elif (args.promotehost != None):
	
	promote_host()
	
elif (args.updatehost != None):
	
	update_host()
	
elif (args.scanhosts):

	display_scan_hosts( args.filter )

elif ( args.addvectorreference ):

	add_reference()

elif ( args.addvulnreference ):
	
	add_reference()

elif (args.listhosts):

	display_hosts()

elif (args.scans):

	get_scans( args.filter )

elif (args.rawquery):

	raw_query( args.filter )

elif (args.createvector):
	
	add_vector( )

elif (args.vectors):
	
	display_vectors( args.filter )

elif (args.scannmap != None):
	
	scan_nmap( args.scannmap )

elif (args.credentials):

	list_credentials( args.filter)

elif (args.webinterface):

	start_web_interface( filter )

elif( args.deletescan != None):

	delete_scan( args.deletescan )	

elif( args.addnetwork ):

	add_network()

elif( args.addhost ):
	
	add_host()

elif (args.createvuln):
	
	create_vuln()

else:
	

	print "Not implemented"	
