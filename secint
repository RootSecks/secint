#!/usr/bin/python

import imp
import _mysql
import sys
import argparse
import subprocess
import os


APP_PATH = os.path.abspath(os.path.dirname(__file__))


try:
	imp.find_module('cherrypy')
	cherryFound = True
except ImportError:
	cherryFound = False


parser = argparse.ArgumentParser(description="Security Intellegence Framework")
mutgroup = parser.add_mutually_exclusive_group(required=True)
#Primary Optional Arguments
mutgroup.add_argument('-lS', '--services', help='List services', action='store_true')
mutgroup.add_argument('-lSc', '--scans', help='List scans', action='store_true')
mutgroup.add_argument('-lH', '--hosts', help='List hosts', action='store_true')
mutgroup.add_argument('-lC', '--credentials', help='List credentials and hashes', action='store_true')
mutgroup.add_argument('-lV', '--listVulns', help='List vulnerabilities', action='store_true')
mutgroup.add_argument('-lVe', '--vectors', help='List vectors', action='store_true')
mutgroup.add_argument('-wI', '--webinterface', help="Start web interface", action="store_true")
mutgroup.add_argument('-rQ', '--rawquery', help='Run a raw query (CAUTION)', action='store_true')
mutgroup.add_argument('-aC', '--addcredential', help='Add credentials', action='store_true')
mutgroup.add_argument('-cV', '--createvector', help='Add vector', action='store_true')
mutgroup.add_argument('-cVu', '--createvuln', help='Add vulnerability', action='store_true')
mutgroup.add_argument('-sN', '--scannmap', metavar='NMAPOPTIONS', help='Run nmap scan')
mutgroup.add_argument('-dS', '--deletescan', metavar="SCANID", help='Delete a scan', type=int)

#Modifiers
parser.add_argument('-nT', '--notitle', help='Surpresses column titles to make output suitable for scripts', action='store_true')
parser.add_argument('-oT', '--outtable', help='Output as pretty table', action='store_true')
parser.add_argument('-sS', '--selectscan', help='Return objects from a specific scan', type=int)
parser.add_argument('-d', '--debug', help="Enable debug messages", action="store_true")
parser.add_argument('-wP', '--webport', help="Define an optional port for the web interface (Default 9191)", type=int)
parser.add_argument('-s', '--serviceid', help="Define the ID of a service for a vuln or vector", type=int)
parser.add_argument('-r', '--reference', help="Define a reference for a vuln or vector (ie a public exploit)")
parser.add_argument('-de', '--description', help="Define a description for a vector or vuln")
parser.add_argument('-R', '--risk', help="Define a risk for a vuln", type=int)

#Positionals
parser.add_argument('filter', type=str, nargs='?', help='Filters output lists')

args = parser.parse_args()


dbhost = "localhost"
dbname = ""
dbuser = ""
dbpass = ""

f = open('secint.conf', 'r')
for line in f:
	line = line.strip('\n')
	if (args.debug):
		print line + "\r\n"
	linearr = line.split('=')
	if (linearr[0] == "database"):
		dbname = linearr[1]
		if (args.debug):
			print "Database name found, putting: " + linearr[1] + " into dbname variable"	
	elif (linearr[0] == "user"):
		dbuser = linearr[1]
		if (args.debug):	
			print "Database user found, putting: " + linearr[1] + " into dbuser variable"
	elif (linearr[0] == "password"):
		dbpass = linearr[1]
		if (args.debug):		
			print "Database pass found, putting: " + linearr[1] + " into dbpass variable"
	elif (linearr[0] == "host"):
                dbpass = linearr[1]
                if (args.debug):
                        print "Database host found, putting: " + linearr[1] + " into dbhost variable"

def get_latest_scan_id():
	con = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        con.query("SELECT * FROM SecintScans ORDER BY ScanTime DESC LIMIT 1")
        nmapscans = con.use_result()
        scanid = nmapscans.fetch_row()[0][0]
	if ( args.selectscan > 0 ):
		scanid = str(args.selectscan)
	return scanid
			
def raw_query( query ):
	querycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        querycon.query( query )
        query = querycon.use_result()
        while True:
        	queryrow = query.fetch_row()
                if (not queryrow):
                	break
		print queryrow

def create_vector( serviceid ):
	querycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	filter = filter.split("|")
	cquery = "INSERT INTO Vectors (VectorServiceID, VectorReference) VALUES (" + filter[0] + ", \"" + filter[1] + "\")"
        querycon.query( cquery )

def list_vectors( filter ):
	
	if (filter):
		filterarg = filter
	else:
		filterarg = ''

	template = "{0:10}|{1:20}|{2:15}|{3:30}|{4:15}|{5:45}"
	vquerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
       	vquery = "SELECT * FROM Vectors"
	vquerycon.query( vquery )
        vquery = vquerycon.use_result()

	if (not args.notitle):
        	if (args.outtable):
                	print template.format("VectorID", "HostIP", "ServicePort", "ServiceProduct", "ServiceVersion", "VectorReference")
		else:
			print 'VectorID\tHostIP\tServicePort\tServiceProduct\tServiceVersion\tVectorReference'

        while True:
                vqueryrow = vquery.fetch_row()
                if (not vqueryrow):
                        break
                squerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
		squery = "SELECT * FROM NmapServices WHERE ServiceID=" + vqueryrow[0][1]
		squerycon.query( squery )
		squery = squerycon.use_result()
		while True:
			squeryrow = squery.fetch_row()
			if (not squeryrow):
				break
			hquerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
			hquery = "SELECT * FROM NmapHosts WHERE HostID=" + squeryrow[0][4]
			hquerycon.query( hquery )
			hquery = hquerycon.use_result()
			while True:
				hqueryrow = hquery.fetch_row()
				if (not hqueryrow):
					break
				greptext = vqueryrow[0][0] + '\t\t' + hqueryrow[0][1] + '\t\t' + squeryrow[0][2] + '\t\t' + squeryrow[0][6] + '\t\t' + squeryrow[0][7] + '\t\t' + vqueryrow[0][2]

				if filterarg in greptext:
					if (args.outtable):
						print template.format(vqueryrow[0][0], hqueryrow[0][1], squeryrow[0][2], squeryrow[0][6], squeryrow[0][7], vqueryrow[0][2])
					else:
						print vqueryrow[0][0] + '\t\t' + hqueryrow[0][1] + '\t\t' + squeryrow[0][2] + '\t\t' + squeryrow[0][6] + '\t\t' + squeryrow[0][7] + '\t\t' + vqueryrow[0][2]

def get_scans( filter ):

	if (filter):
		filterarg = filter
	else:
		filterarg = ''

        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
        derp.query("SELECT * FROM SecintScans")
        hostrow = derp.use_result()
        if (args.outtable):
                template = "{0:15}|{1:10}|{2:20}|{3:25}|{4:100}"

        if (not args.notitle):
                if (args.outtable):
                        print template.format("ScanID", "ScanType", "ScanDuration", "ScanTime", "ScanOptions")
                else:
                        print "ScanID\t\t\tScanType\t\t\tScanDuration\t\t\tScanTime\t\t\tScanOptions"

        while True:
                row = hostrow.fetch_row()
                if not row:
                        break
		greptext = row[0][0] + "\t\t" + row[0][4] + "\t\t" + row[0][2] + "\t\t\t" + row[0][1] + "\t\t\t\t\t" + row[0][3]
		
		if filterarg in greptext:
                	if (args.outtable):
                        	print template.format(row[0][0], row[0][4], row[0][2], row[0][1], row[0][3])
                	else:
                        	print row[0][0] + "\t\t" + row[0][4] + "\t\t" + row[0][2] + "\t\t\t" + row[0][1] + "\t\t\t\t\t" + row[0][3]
	
def list_credentials( filter ):
	print "Not Implemented"

def scan_nmap( options ):
	print "Performing nmap scan with options: " + options
	pipe = subprocess.Popen(["./nmapdb.pl", options], stdout=subprocess.PIPE)
	result = pipe.stdout.read()
	print result
	print "nmap scan complete. The results have been inserted into the secint db"

class host():
	def __init__(self):
		self.hostipaddr = None
		self.hoststatus = None
		self.hostname = None
		self.hostos = None
	def outputall( self ):
		return self.hostipaddr + self.hoststatus + self.hostname + self.hostos

class service(host):
	def __init__(self):
		host.__init__(self)
		self.serviceid = None
		self.serviceproto = None
		self.serviceport = None
		self.servicename = None
		self.serviceproduct = None
		self.serviceversion = None
	def outputall( self ):
		return self.hostipaddr + self.hoststatus + self.hostname + self.hostos + self.serviceid + self.serviceproto + self.serviceport + self.servicename + self.servicename + self.serviceproduct + self.serviceversion

class vector(service):
	def __init__(self):
		service.__init__(self)
		self.vectorid = None
		self.vectorref = None
	def outputall( self ):
		return self.hostipaddr + self.hoststatus + self.hostname + self.hostos + self.serviceid + self.serviceproto + self.serviceport + self.servicename + self.servicename + self.serviceproduct + self.serviceversion + self.vectorif + self.vectorref

def get_hosts():

        scanid = get_latest_scan_id()
        derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	derp.query("SELECT * FROM NmapHosts WHERE ParentScan=" + scanid)
	hostrow = derp.use_result()
	hostList = list()
	while True:
		row = hostrow.fetch_row()
		if not row:
			break
		tmpHost = host()
		tmpHost.hostipaddr = row[0][1]
		tmpHost.hoststatus = row[0][3]
		tmpHost.hostname = row[0][4]
		tmpHost.hostos = row[0][5]		
		hostList.append(tmpHost)
	return hostList

def get_vulns():
	vuln = mysql.connect(dbhost, dbuser, dbpass, dbname)
	
def get_services( hostIP ):
	scanid = get_latest_scan_id()
	derp = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	hostcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	
	if (hostIP != None):
		tmpQuery = "SELECT * FROM NmapHosts WHERE ParentScan=" + scanid + " AND HostIP=\"" + hostIP + "\""
	else:
		tmpQuery = "SELECT * FROM NmapHosts WHERE ParentScan=" + scanid
	
	hostcon.query(tmpQuery)
	hostquery = hostcon.use_result()
	serviceList = list()
	while True:
		hostrow = hostquery.fetch_row()
		if (not hostrow):
			break
		hostid = hostrow[0][0]
		filtertext = 'WHERE ParentHost=' + hostid
		derp.query("SELECT * FROM NmapServices " + filtertext)
		servicequery = derp.use_result()
		while True:
			servicerow = servicequery.fetch_row()
			if (not servicerow):
				break
			tmpService = service()
			tmpService.hostipaddr = hostrow[0][1]
			tmpService.hoststatus = hostrow[0][3]
			tmpService.hostname = hostrow[0][4]
			tmpService.hostos = hostrow[0][5]
			tmpService.serviceid = servicerow[0][0]
			tmpService.serviceproto = servicerow[0][1]
			tmpService.serviceport = servicerow[0][2]
			tmpService.servicename = servicerow[0][3]
			tmpService.serviceproduct = servicerow[0][6]
			tmpService.serviceversion = servicerow[0][7]
			serviceList.append(tmpService)	
	return serviceList	

def get_vectors():
	vquerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	vquery = "SELECT * FROM Vectors"
	vquerycon.query( vquery )
	vquery = vquerycon.use_result()
    	vectorList = list()
	while True:
		vqueryrow = vquery.fetch_row()
		if not vqueryrow:
			break
		squerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
		squery = "SELECT * FROM NmapServices WHERE ServiceID=" + vqueryrow[0][1]
		squerycon.query( squery )
		squery = squerycon.use_result()
		while True:
			squeryrow = squery.fetch_row()
			if (not squeryrow):
				break
			hquerycon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
			hquery = "SELECT * FROM NmapHosts WHERE HostID=" + squeryrow[0][4]
			hquerycon.query( hquery )
			hquery = hquerycon.use_result()
			while True:
				hqueryrow = hquery.fetch_row()
				if (not hqueryrow):
					break
				tmpVector = vector()
				tmpVector.vectorid = vqueryrow[0][0]
				tmpVector.hostipaddr = hqueryrow[0][1]
				tmpVector.serviceport = squeryrow[0][2]
				tmpVector.serviceproduct = squeryrow[0][6]
				tmpVector.serviceversion = squeryrow[0][7]
				tmpVector.vectorref = vqueryrow[0][2]
				vectorList.append(tmpVector)
	return vectorList

class SecIntWeb:

	def index(self, **args):
		
		pageText = ("<html><head>"		
			"<script type=\"text/javascript\" src=\"./jsgl.js\"></script>"
			"</head>"
			"<body>"
			"<div id=\"panel\" style=\"width: 1024px; height: 50px\"></div>"
			"<script type=\"text/javascript\">"
			"myPanel = new jsgl.Panel(document.getElementById(\"panel\"));")
		
		
		tmpHostList = get_hosts()
		hostList = list()
		for host in tmpHostList:
			if host.hoststatus == "up":
				hostList.append(host)

		hostNum = len(hostList)
		hostWidth = 1024/hostNum
		
		hostCounter = 0
		for host in hostList:

			if host.hostname == "0":
				host.hostname = "unknown"
			
			tmpServiceList = get_services(host.hostipaddr)
				
			pageText = pageText + ("var host" + str(hostCounter) + " = myPanel.createRectangle();"
					"host" + str(hostCounter) + ".setWidth(" + str(hostWidth - 5) + ");"
					"host" + str(hostCounter) + ".setHeight(25);"
					"host" + str(hostCounter) + ".setX(" + str(hostWidth * hostCounter) + ");"
					"host" + str(hostCounter) + ".setY(0);"
					"host" + str(hostCounter) + ".getFill().setColor('rgb(255,0,0)');"
					"myPanel.addElement(host" + str(hostCounter) + ");"
					"var derp" + str(hostCounter) + " = function() {"
					"document.getElementById('hostservice').innerHTML = '"
					"HostIP: " + host.hostipaddr + "<br>"
					"HostName: " + host.hostname + "<br>"
					"HostOS: " + host.hostos + "<br><br>"
					"Services Detected: <br><br>"
					"<table border=\"1\">"
					"<tr>"
					"<td>ServicePort</td>"
					"<td>ServiceProto</td>"
					"<td>ServiceID</td>"
					"<td>ServiceName</td>"
					"<td>SerivceProduct</td>"
					"<td>ServiceVersion</td>"
					"</tr>")

			for svc in tmpServiceList:
				pageText = pageText + ("<tr><td>" + svc.serviceport + "</td>"
						"<td>" + svc.serviceproto + "</td>"
						"<td>" + svc.serviceid + "</td>"
						"<td>" + svc.servicename + "</td>"
						"<td>" + svc.serviceproduct + "</td>"
						"<td>" + svc.serviceversion + "</td>"
						"</tr>")
			
			pageText = pageText + "</table>"		
			pageText = pageText + ("';"
					"};"
					"var lerp" + str(hostCounter) + " = function() {"
					"document.getElementById('hostservice').innerHTML = ' ';"
					"};"
					"host" + str(hostCounter) + ".addMouseOverListener(derp" + str(hostCounter) + ");"
					"host" + str(hostCounter) + ".addMouseOutListener(lerp" + str(hostCounter) + ");")								
			hostCounter = hostCounter + 1

		pageText = pageText + "</script>"		
		
		pageText = pageText + "<div id=\"hostservice\"></div>"
		
		if not args:
			print "LERP"
		else:
			if 'd' in args:
				pageText = pageText + "d Arg"

		pageText = pageText + '</body></html>'	
		return pageText
	
	index.exposed = True

	def jsgl_js( self ):
		fileHandle = open('jsgl.js')
		fileContents = fileHandle.read()
		return fileContents
	jsgl_js.exposed = True

def start_web_interface( filter ):

	if (cherryFound):

		print "CherryPy Found, starting web server"	

		import cherrypy

		if args.webport > 0:
			portnum = args.webport
		else:
			portnum = 9191

		if (args.debug):
			print portnum

		cherrypy.server.socket_port = portnum
		cherrypy.server.socket_host = '0.0.0.0'
		#cherrypy.config.update({ "environment": "embedded" })
		cherrypy.quickstart(SecIntWeb())

	else:
		print "CherryPy Not Found :( "
		
def display_hosts( filter ):
	if (filter):
		filtertext = filter
        else:
		filtertext = ''
		
	if (args.debug):
		print "Filtertext: " + filtertext
	
	if (args.outtable):
		template = "{0:15}|{1:10}|{2:25}|{3:10}"	
	
	if (not args.notitle):
		if (args.outtable):
			print template.format("HostIP", "HostStatus", "HostName", "HostOS")
		else:
			print "HostIP\t\t\tHostStatus\t\t\tHostName\t\t\tHostOS"
	
	hostList = get_hosts()
	
	for host in hostList:
		greptext = host.hostipaddr + "\t\t" + host.hoststatus + "\t\t\t" + host.hostname + "\t\t\t\t\t" + host.hostos
		if filtertext in greptext:
			if (args.outtable):
				print template.format(host.hostipaddr, host.hoststatus, host.hostname, host.hostos)
			else:
				print host.hostipaddr + "\t\t" + host.hoststatus + "\t\t\t" + host.hostname + "\t\t\t\t\t" + host.hostos

def display_services( filter ):
	
	template = "{0:15}|{1:25}|{2:8}|{3:8}|{4:8}|{5:15}|{6:45}|{7:35}"
	if (not args.notitle):
		if (args.outtable):
			print template.format("HostIP", "HostName", "SvcID", "SvcProto", "SvcPort", "ServiceName", "ServiceProduct", "ServiceVersion")
		else:
			print 'HostIP\t\t\tHostName\tSvcID\tSvcProto\tSvcPort\tServiceName\tServiceProduct\tServiceVersion'

	if (filter):
		filterarg = filter
	else:
		filterarg = ''

	serviceList = get_services(None)
	
	for service in serviceList:
		greptext = service.hostipaddr + '\t\t' + service.hostname + '\t\t' + service.serviceid + '\t\t' + service.serviceproto + '\t\t' + service.serviceport + '\t\t' + service.servicename + '\t\t' + service.serviceproduct + '\t\t' + service.serviceversion
		if filterarg in greptext:
			if (args.outtable):
				print template.format(service.hostipaddr, service.hostname, service.serviceid, service.serviceproto, service.serviceport, service.servicename, service.serviceproduct, service.serviceversion)
			else:
				print service.hostipaddr + '\t\t' + service.hostname + '\t\t' + service.serviceid + '\t\t' + service.serviceproto + '\t\t' + service.serviceport + '\t\t' + service.servicename + '\t\t' + service.serviceproduct + '\t\t' + service.serviceversion
	
def display_vectors( filter ):
	if (filter):
		filterarg = filter
	else:
		filterarg = ''
	template = "{0:10}|{1:20}|{2:15}|{3:30}|{4:15}|{5:45}"
	if (not args.notitle):
        	if (args.outtable):
                	print template.format("VectorID", "HostIP", "ServicePort", "ServiceProduct", "ServiceVersion", "VectorReference")
		else:
			print 'VectorID\tHostIP\tServicePort\tServiceProduct\tServiceVersion\tVectorReference'
	
	vectorList = get_vectors()
	
	for vector in vectorList:
		greptext = vector.vectorid + '\t\t' + vector.hostipaddr + '\t\t' + vector.serviceport + '\t\t' + vector.serviceproduct + '\t\t' + vector.serviceversion + '\t\t' + vector.vectorref
		if filterarg in greptext:
			if (args.outtable):
				print template.format(vector.vectorid, vector.hostipaddr, vector.serviceport, vector.serviceproduct, vector.serviceversion, vector.vectorref)
			else:
				print vector.vectorid + '\t\t' + vector.hostipaddr + '\t\t' + vector.serviceport + '\t\t' + vector.serviceproduct + '\t\t' + vector.serviceversion + '\t\t' + vector.vectorref



def multi_line_input(helloString, stringDelim):
	print helloString
	if stringDelim != None:
		for line in iter(raw_input, stringDelim):
			print line
			pass
	

def create_vuln(vulnSvcId, vulnRef, vulnDesc, vulnRisk):
	print "Not implemenetd"	



def delete_scan( scanid ):
	delcon = _mysql.connect(dbhost, dbuser, dbpass, dbname)
	delquery = "DELETE FROM NmapServices WHERE ParentHost IN ( SELECT HostID FROM NmapHosts WHERE ParentScan=" + str(scanid) + ")"
	delcon.query( delquery )
	delquery = "DELETE FROM NmapHosts WHERE ParentScan=" + str(scanid)
	delcon.query( delquery )
	delquery = "DELETE FROM SecintScans WHERE ScanID=" + str(scanid)
	delcon.query( delquery )
		


		
if (args.services):
	
	display_services( args.filter )	

elif (args.hosts):
	
	display_hosts( args.filter )

elif (args.scans):

	get_scans( args.filter )

elif (args.rawquery):

	raw_query( args.filter )

elif (args.createvector):
	
	create_vector( args.filter )

elif (args.vectors):
	
	display_vectors( args.filter )

elif (args.scannmap != None):
	
	scan_nmap( args.scannmap )

elif (args.credentials):

	list_credentials( args.filter)

elif (args.webinterface):

	start_web_interface( filter )

elif( args.deletescan != None):

	delete_scan( args.deletescan )	

elif (args.createvuln):

	if (args.serviceid != None):
		vulnSvcId = args.serviceid
	else:
		vulnSvcId = raw_input('Enter a service id for this vuln: ')		

	if (args.reference != None):
		vulnRef = args.reference
	else:
		vulnRef = raw_input('Enter a reference for this vuln: ')

	if (args.description != None):
		vulnDesc = args.description
	else:
		multi_line_input('Enter breif description. End with !: ', '!')
		
	if (args.risk != None):
		vulnRisk = args.risk
	else:
		vulnRisk = raw_input('Enter a risk level for this vuln: ')
		
	
	create_vuln(vulnSvcId, vulnRef, vulnDesc, vulnRisk)

else:
	
	print 'not implemened: ' + APP_PATH
